//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ApiClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? "";
  }

  /**
   * @param body (optional)
   * @return Success
   */
  login(body: UserLoginModel | undefined): Promise<void> {
    let url_ = this.baseUrl + "/api/Auth/login";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processLogin(_response);
    });
  }

  protected processLogin(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  register(body: UserPostModel | undefined): Promise<string> {
    let url_ = this.baseUrl + "/api/Auth/register";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processRegister(_response);
    });
  }

  protected processRegister(response: Response): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return _responseText; // Assuming the token is returned in the response body
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<string>(null as any);
  }

  /**
   * @return Success
   */
  documentAll(): Promise<DocumentDTO[]> {
    let url_ = this.baseUrl + "/api/Document";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "text/plain",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDocumentAll(_response);
    });
  }

  protected processDocumentAll(response: Response): Promise<DocumentDTO[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(DocumentDTO.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<DocumentDTO[]>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  documentPOST(body: DocumentPostModel | undefined): Promise<void> {
    let url_ = this.baseUrl + "/api/Document";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDocumentPOST(_response);
    });
  }

  protected processDocumentPOST(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  documentGET(id: number): Promise<DocumentDTO> {
    let url_ = this.baseUrl + "/api/Document/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "text/plain",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDocumentGET(_response);
    });
  }

  protected processDocumentGET(response: Response): Promise<DocumentDTO> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DocumentDTO.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<DocumentDTO>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  documentPUT(id: number, body: DocumentPostModel | undefined): Promise<void> {
    let url_ = this.baseUrl + "/api/Document/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDocumentPUT(_response);
    });
  }

  protected processDocumentPUT(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  documentDELETE(id: number): Promise<void> {
    let url_ = this.baseUrl + "/api/Document/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "DELETE",
      headers: {},
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDocumentDELETE(_response);
    });
  }

  protected processDocumentDELETE(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  folderAll(): Promise<Folder[]> {
    let url_ = this.baseUrl + "/api/Folder";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "text/plain",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processFolderAll(_response);
    });
  }

  protected processFolderAll(response: Response): Promise<Folder[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(Folder.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<Folder[]>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  folderPOST(body: FolderPostModel | undefined): Promise<FolderDTO> {
    let url_ = this.baseUrl + "/api/Folder";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "text/plain",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processFolderPOST(_response);
    });
  }

  protected processFolderPOST(response: Response): Promise<FolderDTO> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = FolderDTO.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<FolderDTO>(null as any);
  }

  /**
   * @return Success
   */
  folderGET(id: number): Promise<FolderDTO> {
    let url_ = this.baseUrl + "/api/Folder/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "text/plain",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processFolderGET(_response);
    });
  }

  protected processFolderGET(response: Response): Promise<FolderDTO> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = FolderDTO.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<FolderDTO>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  folderPUT(id: number, body: FolderPostModel | undefined): Promise<void> {
    let url_ = this.baseUrl + "/api/Folder/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processFolderPUT(_response);
    });
  }

  protected processFolderPUT(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  folderDELETE(id: number): Promise<void> {
    let url_ = this.baseUrl + "/api/Folder/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "DELETE",
      headers: {},
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processFolderDELETE(_response);
    });
  }

  protected processFolderDELETE(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  usersAll(): Promise<UserDTO[]> {
    let url_ = this.baseUrl + "/api/Users";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "text/plain",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUsersAll(_response);
    });
  }

  protected processUsersAll(response: Response): Promise<UserDTO[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200) result200!.push(UserDTO.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<UserDTO[]>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  usersPOST(body: UserPostModel | undefined): Promise<void> {
    let url_ = this.baseUrl + "/api/Users";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUsersPOST(_response);
    });
  }

  protected processUsersPOST(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  usersGET(id: number): Promise<User> {
    let url_ = this.baseUrl + "/api/Users/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "text/plain",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUsersGET(_response);
    });
  }

  protected processUsersGET(response: Response): Promise<User> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = User.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<User>(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  usersPUT(id: number, body: UserPutModel | undefined): Promise<void> {
    let url_ = this.baseUrl + "/api/Users/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUsersPUT(_response);
    });
  }

  protected processUsersPUT(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  usersDELETE(id: number): Promise<void> {
    let url_ = this.baseUrl + "/api/Users/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "DELETE",
      headers: {},
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUsersDELETE(_response);
    });
  }

  protected processUsersDELETE(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  usersGET2(email: string): Promise<User> {
    let url_ = this.baseUrl + "/api/Users/{email}";
    if (email === undefined || email === null)
      throw new Error("The parameter 'email' must be defined.");
    url_ = url_.replace("{email}", encodeURIComponent("" + email));
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json", // עדיף להשתמש ב-application/json במקום text/plain
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUsersGET2(_response);
    });
  }

  protected processUsersGET2(response: Response): Promise<User> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        return User.fromJS(resultData200);
      });
    } else {
      return response.text().then((_responseText) => {
        throw new Error(
          `An unexpected server error occurred: ${status} - ${_responseText}`
        );
      });
    }
  }
}

export class Document implements IDocument {
  documentId?: number;
  documentName?: string | undefined;
  filePath?: string | undefined;
  uploadDate?: Date;
  folderId?: number;

  constructor(data?: IDocument) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.documentId = _data["documentId"];
      this.documentName = _data["documentName"];
      this.filePath = _data["filePath"];
      this.uploadDate = _data["uploadDate"]
        ? new Date(_data["uploadDate"].toString())
        : <any>undefined;
      this.folderId = _data["folderId"];
    }
  }

  static fromJS(data: any): Document {
    data = typeof data === "object" ? data : {};
    let result = new Document();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["documentId"] = this.documentId;
    data["documentName"] = this.documentName;
    data["filePath"] = this.filePath;
    data["uploadDate"] = this.uploadDate
      ? this.uploadDate.toISOString()
      : <any>undefined;
    data["folderId"] = this.folderId;
    return data;
  }
}

export interface IDocument {
  documentId?: number;
  documentName?: string | undefined;
  filePath?: string | undefined;
  uploadDate?: Date;
  folderId?: number;
}

export class DocumentDTO implements IDocumentDTO {
  documentName?: string | undefined;
  filePath?: string | undefined;
  uploadDate?: Date;
  folderId?: number;

  constructor(data?: IDocumentDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.documentName = _data["documentName"];
      this.filePath = _data["filePath"];
      this.uploadDate = _data["uploadDate"]
        ? new Date(_data["uploadDate"].toString())
        : <any>undefined;
      this.folderId = _data["folderId"];
    }
  }

  static fromJS(data: any): DocumentDTO {
    data = typeof data === "object" ? data : {};
    let result = new DocumentDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["documentName"] = this.documentName;
    data["filePath"] = this.filePath;
    data["uploadDate"] = this.uploadDate
      ? this.uploadDate.toISOString()
      : <any>undefined;
    data["folderId"] = this.folderId;
    return data;
  }
}

export interface IDocumentDTO {
  documentName?: string | undefined;
  filePath?: string | undefined;
  uploadDate?: Date;
  folderId?: number;
}

export class DocumentPostModel implements IDocumentPostModel {
  documentName?: string | undefined;
  filePath?: string | undefined;
  folderId?: number;

  constructor(data?: IDocumentPostModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.documentName = _data["documentName"];
      this.filePath = _data["filePath"];
      this.folderId = _data["folderId"];
    }
  }

  static fromJS(data: any): DocumentPostModel {
    data = typeof data === "object" ? data : {};
    let result = new DocumentPostModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["documentName"] = this.documentName;
    data["filePath"] = this.filePath;
    data["folderId"] = this.folderId;
    return data;
  }
}

export interface IDocumentPostModel {
  documentName?: string | undefined;
  filePath?: string | undefined;
  folderId?: number;
}

export class Folder implements IFolder {
  folderId?: number;
  folderName?: string | undefined;
  userId?: number;
  createdDate?: Date;
  documents?: Document[] | undefined;

  constructor(data?: IFolder) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.folderId = _data["folderId"];
      this.folderName = _data["folderName"];
      this.userId = _data["userId"];
      this.createdDate = _data["createdDate"]
        ? new Date(_data["createdDate"].toString())
        : <any>undefined;
      if (Array.isArray(_data["documents"])) {
        this.documents = [] as any;
        for (let item of _data["documents"])
          this.documents!.push(Document.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Folder {
    data = typeof data === "object" ? data : {};
    let result = new Folder();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["folderId"] = this.folderId;
    data["folderName"] = this.folderName;
    data["userId"] = this.userId;
    data["createdDate"] = this.createdDate
      ? this.createdDate.toISOString()
      : <any>undefined;
    if (Array.isArray(this.documents)) {
      data["documents"] = [];
      for (let item of this.documents)
        data["documents"].push(item ? item.toJSON() : <any>undefined);
    }
    return data;
  }
}

export interface IFolder {
  folderId?: number;
  folderName?: string | undefined;
  userId?: number;
  createdDate?: Date;
  documents?: Document[] | undefined;
}

export class FolderDTO implements IFolderDTO {
  folderName?: string | undefined;
  createdDate?: Date;
  documents?: DocumentDTO[] | undefined;

  constructor(data?: IFolderDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.folderName = _data["folderName"];
      this.createdDate = _data["createdDate"]
        ? new Date(_data["createdDate"].toString())
        : <any>undefined;
      if (Array.isArray(_data["documents"])) {
        this.documents = [] as any;
        for (let item of _data["documents"])
          this.documents!.push(DocumentDTO.fromJS(item));
      }
    }
  }

  static fromJS(data: any): FolderDTO {
    data = typeof data === "object" ? data : {};
    let result = new FolderDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["folderName"] = this.folderName;
    data["createdDate"] = this.createdDate
      ? this.createdDate.toISOString()
      : <any>undefined;
    if (Array.isArray(this.documents)) {
      data["documents"] = [];
      for (let item of this.documents)
        data["documents"].push(item ? item.toJSON() : <any>undefined);
    }
    return data;
  }
}

export interface IFolderDTO {
  folderName?: string | undefined;
  createdDate?: Date;
  documents?: DocumentDTO[] | undefined;
}

export class FolderPostModel implements IFolderPostModel {
  folderName?: string | undefined;

  constructor(data?: IFolderPostModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.folderName = _data["folderName"];
    }
  }

  static fromJS(data: any): FolderPostModel {
    data = typeof data === "object" ? data : {};
    let result = new FolderPostModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["folderName"] = this.folderName;
    return data;
  }
}

export interface IFolderPostModel {
  folderName?: string | undefined;
}

export class User implements IUser {
  userId?: number;
  userName?: string | undefined;
  password?: string | undefined;
  email?: string | undefined;
  folders?: Folder[] | undefined;

  constructor(data?: IUser) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userId = _data["userId"];
      this.userName = _data["userName"];
      this.password = _data["password"];
      this.email = _data["email"];
      if (Array.isArray(_data["folders"])) {
        this.folders = [] as any;
        for (let item of _data["folders"])
          this.folders!.push(Folder.fromJS(item));
      }
    }
  }

  static fromJS(data: any): User {
    data = typeof data === "object" ? data : {};
    let result = new User();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["userId"] = this.userId;
    data["userName"] = this.userName;
    data["password"] = this.password;
    data["email"] = this.email;
    if (Array.isArray(this.folders)) {
      data["folders"] = [];
      for (let item of this.folders)
        data["folders"].push(item ? item.toJSON() : <any>undefined);
    }
    return data;
  }
}

export interface IUser {
  userId?: number;
  userName?: string | undefined;
  password?: string | undefined;
  email?: string | undefined;
  folders?: Folder[] | undefined;
}

export class UserDTO implements IUserDTO {
  userId?: number;
  username?: string | undefined;
  email?: string | undefined;
  folders?: FolderDTO[] | undefined;

  constructor(data?: IUserDTO) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userId = _data["userId"];
      this.username = _data["username"];
      this.email = _data["email"];
      if (Array.isArray(_data["folders"])) {
        this.folders = [] as any;
        for (let item of _data["folders"])
          this.folders!.push(FolderDTO.fromJS(item));
      }
    }
  }

  static fromJS(data: any): UserDTO {
    data = typeof data === "object" ? data : {};
    let result = new UserDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["userId"] = this.userId;
    data["username"] = this.username;
    data["email"] = this.email;
    if (Array.isArray(this.folders)) {
      data["folders"] = [];
      for (let item of this.folders)
        data["folders"].push(item ? item.toJSON() : <any>undefined);
    }
    return data;
  }
}

export interface IUserDTO {
  userId?: number;
  username?: string | undefined;
  email?: string | undefined;
  folders?: FolderDTO[] | undefined;
}

export class UserLoginModel implements IUserLoginModel {
  email?: string | undefined;
  password?: string | undefined;

  constructor(data?: IUserLoginModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.email = _data["email"];
      this.password = _data["password"];
    }
  }

  static fromJS(data: any): UserLoginModel {
    data = typeof data === "object" ? data : {};
    let result = new UserLoginModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["email"] = this.email;
    data["password"] = this.password;
    return data;
  }
}

export interface IUserLoginModel {
  email?: string | undefined;
  password?: string | undefined;
}

export class UserPostModel implements IUserPostModel {
  userName?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;

  constructor(data?: IUserPostModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userName = _data["userName"];
      this.email = _data["email"];
      this.password = _data["password"];
    }
  }

  static fromJS(data: any): UserPostModel {
    data = typeof data === "object" ? data : {};
    let result = new UserPostModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["userName"] = this.userName;
    data["email"] = this.email;
    data["password"] = this.password;
    return data;
  }
}

export interface IUserPostModel {
  userName?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
}

export class UserPutModel implements IUserPutModel {
  userName?: string | undefined;
  email?: string | undefined;

  constructor(data?: IUserPutModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userName = _data["userName"];
      this.email = _data["email"];
    }
  }

  static fromJS(data: any): UserPutModel {
    data = typeof data === "object" ? data : {};
    let result = new UserPutModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["userName"] = this.userName;
    data["email"] = this.email;
    return data;
  }
}

export interface IUserPutModel {
  userName?: string | undefined;
  email?: string | undefined;
}

export class SwaggerException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isSwaggerException = true;

  static isSwaggerException(obj: any): obj is SwaggerException {
    return obj.isSwaggerException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new SwaggerException(message, status, response, headers, null);
}
